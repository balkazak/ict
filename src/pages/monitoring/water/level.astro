---
import Layout from "@/layouts/Layout.astro";
---

<Layout title="Water Level Monitoring | ICT Central Asia">
  <section class="bg-base-200 py-16">
    <div class="container mx-auto max-w-7xl px-4 py-8">
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Мониторинг уровня воды</h1>
        <p class="text-gray-600 mb-6">Точные измерения уровня, глубины, давления и температуры воды</p>
      </div>
      
      <div id="equipment-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      </div>
    </div>
    
    <div id="equipment-modal" class="fixed inset-0 z-50 hidden items-center justify-center p-4 bg-black bg-opacity-50">
      <div class="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div class="sticky top-0 bg-white border-b p-6 flex justify-between items-center">
          <h2 id="modal-title" class="text-2xl font-bold text-gray-900"></h2>
          <button id="close-modal" class="text-gray-500 hover:text-gray-700">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="modal-content" class="p-6"></div>
      </div>
    </div>
  </section>
</Layout>

<script>
  const waterLevelEquipment = [
    {
      id: 'stevens-sdx',
      name: 'Stevens SDX',
      category: 'level',
      subcategory: 'Погружной датчик уровня',
      image: 'https://via.placeholder.com/400x300/06B6D4/FFFFFF?text=Stevens+SDX',
      shortDescription: 'Погружной датчик давления для высокоточных измерений уровня жидкости',
      features: [
        'Корпус из ударопрочного и коррозионностойкого ПВХ Type II',
        'Вентилируемый кабель (длина на заказ)',
        'Аналоговый выход 4-20 мА с линейной зависимостью',
        'Герметизированная электроника'
      ],
      specifications: {
        'Точность': '±0.25% от полного диапазона',
        'Выходной сигнал': '4-20 мА',
        'Материал корпуса': 'ПВХ Type II',
        'Тип кабеля': 'Вентилируемый'
      },
      applications: [
        'Мониторинг уровней в реках, озерах и резервуарах',
        'Контроль сточных вод и промышленных жидкостей'
      ]
    },
    {
      id: 'ecl-8439',
      name: 'ECL 8439',
      category: 'level',
      subcategory: 'Погружной датчик давления',
      image: 'https://via.placeholder.com/400x300/84CC16/FFFFFF?text=ECL+8439',
      shortDescription: 'Датчик уровня и глубины воды на базе керамических сенсоров',
      features: [
        'Технология толстоплёночных керамических сенсоров',
        'Высокопроизводительная электроника на базе ASIC-чипа',
        'Встроенная защита от грозовых перенапряжений',
        'Совместимость с IoT-устройствами ICT International'
      ],
      specifications: {
        'Диапазон измерений': '0-2 Бар',
        'Точность': '±0,5% от полной шкалы',
        'Выходной сигнал': '4-20 мА',
        'Материал корпуса': 'Нержавеющая сталь / Дуплексная сталь'
      },
      applications: [
        'Мониторинг грунтовых вод',
        'Контроль стоков',
        'Мониторинг поверхностных водоёмов'
      ]
    },
    {
      id: 'aqua-troll-600',
      name: 'Aqua TROLL 600',
      category: 'pressure',
      subcategory: 'Интеллектуальный датчик давления',
      image: 'https://via.placeholder.com/400x300/8B5CF6/FFFFFF?text=Aqua+TROLL+600',
      shortDescription: 'Интеллектуальный керамический датчик давления и температуры',
      features: [
        'Керамическая мембранная технология',
        'Фиксация пиковых уровней',
        'Автоматические замеры с настраиваемым интервалом',
        'Программируемые поправки на гравитационное поле',
        'Автоматическая компенсация плотности воды от температуры',
        'Поддержка SDI-12, RS-485 и Modbus RTU'
      ],
      specifications: {
        'Диапазон измерения глубины': 'от 2 до 200 метров',
        'Интерфейсы': 'SDI-12, RS-485, Modbus RTU',
        'Материал корпуса': 'Нержавеющая сталь',
        'Типы': 'Вентилируемый и абсолютный модуль'
      },
      applications: [
        'Мониторинг уровня воды в реках и озерах',
        'Контроль грунтовых вод',
        'Удаленные мониторинговые станции',
        'Гидрологические исследования'
      ],
      versions: [
        {
          name: 'Вентилируемый',
          material: 'Нержавеющая сталь',
          application: 'Компенсация барометрического давления'
        },
        {
          name: 'Абсолютный',
          material: 'Нержавеющая сталь',
          application: 'Измерение абсолютного давления'
        }
      ]
    }
  ];

  function createEquipmentCard(equipment) {
    const categoryName = equipment.category === 'level' ? 'Уровень' : 'Давление';
    
    return `
      <div class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 cursor-pointer equipment-card" data-id="${equipment.id}">
        <div class="relative">
          <img src="${equipment.image}" alt="${equipment.name}" class="w-full h-48 object-cover rounded-t-lg bg-gray-200">
          <div class="absolute top-2 right-2">
            <span class="bg-blue-600 text-white px-2 py-1 rounded-full text-xs font-medium">
              ${categoryName}
            </span>
          </div>
        </div>
        
        <div class="p-6">
          <h3 class="text-xl font-semibold text-gray-900 mb-2">${equipment.name}</h3>
          <p class="text-sm text-blue-600 mb-3">${equipment.subcategory}</p>
          <p class="text-gray-700 mb-4 line-clamp-3">${equipment.shortDescription}</p>
          
          <div class="flex flex-wrap gap-2 mb-4">
            ${equipment.features.slice(0, 2).map(feature => 
              `<span class="bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs">
                ${feature.length > 30 ? feature.substring(0, 30) + '...' : feature}
              </span>`
            ).join('')}
            ${equipment.features.length > 2 ? 
              `<span class="bg-blue-100 text-blue-700 px-2 py-1 rounded text-xs">
                +${equipment.features.length - 2} еще
              </span>` : ''
            }
          </div>
          
          <button class="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors duration-200">
            Подробнее
          </button>
        </div>
      </div>
    `;
  }

  function createModalContent(equipment) {
    const versionsSection = equipment.versions ? `
      <div class="mt-8">
        <h3 class="text-xl font-semibold mb-4">Модификации</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          ${equipment.versions.map(version => 
            `<div class="border rounded-lg p-4">
              <h4 class="font-semibold text-gray-900 mb-2">${version.name}</h4>
              <p class="text-sm text-gray-600 mb-1"><strong>Материал:</strong> ${version.material}</p>
              <p class="text-sm text-gray-600"><strong>Применение:</strong> ${version.application}</p>
            </div>`
          ).join('')}
        </div>
      </div>
    ` : '';

    return `
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div>
          <img src="${equipment.image}" alt="${equipment.name}" class="w-full h-64 object-cover rounded-lg mb-4">
          <div class="bg-blue-50 p-4 rounded-lg">
            <h3 class="font-semibold text-blue-900 mb-2">Категория</h3>
            <p class="text-blue-800">${equipment.subcategory}</p>
          </div>
        </div>
        
        <div>
          <p class="text-gray-700 mb-6">${equipment.shortDescription}</p>
          
          <h3 class="text-xl font-semibold mb-4">Основные характеристики</h3>
          <ul class="space-y-2 mb-6">
            ${equipment.features.map(feature => 
              `<li class="flex items-start">
                <svg class="w-5 h-5 text-blue-500 mr-2 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
                <span class="text-gray-700">${feature}</span>
              </li>`
            ).join('')}
          </ul>
        </div>
      </div>
      
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8">
        <div>
          <h3 class="text-xl font-semibold mb-4">Технические характеристики</h3>
          <div class="bg-gray-50 rounded-lg p-4">
            <table class="w-full">
              <tbody>
                ${Object.entries(equipment.specifications).map(([key, value]) => 
                  `<tr class="border-b border-gray-200 last:border-b-0">
                    <td class="py-2 pr-4 font-medium text-gray-900">${key}</td>
                    <td class="py-2 text-gray-700">${value}</td>
                  </tr>`
                ).join('')}
              </tbody>
            </table>
          </div>
        </div>
        
        <div>
          <h3 class="text-xl font-semibold mb-4">Области применения</h3>
          <ul class="space-y-2">
            ${equipment.applications.map(application => 
              `<li class="flex items-start">
                <svg class="w-5 h-5 text-blue-500 mr-2 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
                <span class="text-gray-700">${application}</span>
              </li>`
            ).join('')}
          </ul>
        </div>
      </div>
      ${versionsSection}
    `;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const equipmentGrid = document.getElementById('equipment-grid');
    const modal = document.getElementById('equipment-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('modal-content');
    const closeModal = document.getElementById('close-modal');

    equipmentGrid.innerHTML = waterLevelEquipment.map(createEquipmentCard).join('');

    equipmentGrid.addEventListener('click', (e) => {
      const card = e.target.closest('.equipment-card');
      if (card) {
        const equipmentId = card.dataset.id;
        const equipment = waterLevelEquipment.find(eq => eq.id === equipmentId);
        
        if (equipment) {
          modalTitle.textContent = equipment.name;
          modalContent.innerHTML = createModalContent(equipment);
          modal.classList.remove('hidden');
          modal.classList.add('flex');
          document.body.style.overflow = 'hidden';
        }
      }
    });

    const closeModalHandler = () => {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      document.body.style.overflow = '';
    };

    closeModal.addEventListener('click', closeModalHandler);
    
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModalHandler();
      }
    });
  });
</script>

<style>
.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>
