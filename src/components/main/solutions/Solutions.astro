---
import SolutionCard from "./SolutionCard.astro";
import image1 from "@/assets/solutions/1.png";
import image2 from "@/assets/solutions/4.jpg";
import image3 from "@/assets/solutions/5.jpg";
import image4 from "@/assets/solutions/equipment.png";
---

<section class="relative min-h-screen overflow-hidden bg-[#F0FAF9]">
  <!-- Water drop effect container -->
  <div id="water-effect" class="absolute inset-0 pointer-events-none">
    <canvas id="water-canvas"></canvas>
  </div>

  <!-- Leaf grid background -->
  <div class="absolute inset-0 opacity-10">
    <div class="leaf-grid"></div>
  </div>

  <!-- Flowing streams -->
  <div class="absolute inset-0 overflow-hidden">
    {Array.from({ length: 5 }).map((_, i) => (
      <div
        class="eco-stream absolute h-[1px] w-full"
        style={{
          top: `${i * 20}%`,
          left: "0",
          animationDelay: `${i * 0.5}s`,
        }}
      ></div>
    ))}
  </div>

  <!-- Main content -->
  <div class="relative z-10 container mx-auto max-w-6xl px-4 py-32">
    <div class="mb-20 text-center">
      <div class="eco-badge-large mx-auto mb-6" data-aos="zoom-in">
        <div class="eco-badge-large-glow"></div>
        <span class="relative z-10 text-2xl font-bold text-[#0A7B76]">Наши решения</span>
      </div>
      <h2 
        class="eco-heading text-4xl font-bold text-[#0A5B56] md:text-5xl"
        data-aos="fade-up"
        data-aos-delay="200"
      >
      Передовые технологии для устойчивого развития
      </h2>
    </div>

    <div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-4">
      {[
        {
          title: "ESG-стратегии и отчетность",
          image: image1,
          description: "Комплексные решения для оценки и внедрения ESG-стратегий",
          points: [
            "Подготовка ESG-отчетов",
            "Разработка дорожных карт",
            "Оценка экологических рисков",
            "Подбор и поставка оборудования для достижения углеродной нейтральности",
          ],
          delay: 400,
        },
        {
          title: "Углеродные проекты",
          image: image2,
          description: "Экономика будущего",
          points: [
            "Разработка проектов",
            "Верификация и валидация",
            "IOT мониторинг CO2",
          ],
          delay: 600,
        },
        {
          title: "Инновационные решения",
          image: image3,
          description: "Передовые технологии для управления экосистемами",
          points: [
            "Цифровой двойник",
            "Предиктивная аналитика",
            "Умный мониторинг",
          ],
          delay: 800,
        },
        {
          title: "Лабораторное и промышленное оборудование",
          image: image4,
          description: "Высокоточное оборудование от ведущих мировых производителей",
          points: [
            "ICT International",
            "Soil Moisture",
            "WALZ",
            "Apogee",
            "Milesight",
          ],
          delay: 1000,
        },
      ].map((solution) => (
        <div data-aos="fade-up" data-aos-delay={solution.delay}>
          <SolutionCard {...solution} />
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  .leaf-grid {
    background-image: linear-gradient(
      45deg,
      rgba(10, 123, 118, 0.1) 1px,
      transparent 1px
    ),
    linear-gradient(
      -45deg,
      rgba(10, 123, 118, 0.1) 1px,
      transparent 1px
    );
    background-size: 40px 40px;
    width: 100%;
    height: 100%;
    animation: gridScroll 20s linear infinite;
  }

  .eco-stream {
    background: linear-gradient(
      90deg,
      transparent,
      rgba(10, 123, 118, 0.3),
      transparent
    );
    animation: streamFlow 3s linear infinite;
  }

  .eco-badge-large {
    position: relative;
    width: fit-content;
    padding: 1rem 3rem;
    background: rgba(255, 255, 255, 0.5);
    border: 1px solid rgba(10, 123, 118, 0.2);
    border-radius: 4px;
    overflow: hidden;
    backdrop-filter: blur(5px);
  }

  .eco-badge-large-glow {
    position: absolute;
    inset: 0;
    background: radial-gradient(
      circle at 50% 50%,
      rgba(10, 123, 118, 0.2),
      transparent 70%
    );
    animation: pulseGlow 4s ease-in-out infinite;
  }

  .eco-heading {
    position: relative;
    background: linear-gradient(90deg, #0A5B56, #0A7B76, #0A5B56);
    background-size: 200% auto;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: textFlow 8s linear infinite;
  }

  @keyframes gridScroll {
    0% { transform: translateY(0); }
    100% { transform: translateY(40px); }
  }

  @keyframes streamFlow {
    0% { transform: translateX(-100%); opacity: 0; }
    50% { transform: translateX(0); opacity: 1; }
    100% { transform: translateX(100%); opacity: 0; }
  }

  @keyframes pulseGlow {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 0.7; }
  }

  @keyframes textFlow {
    0% { background-position: 0% 50%; }
    100% { background-position: 200% 50%; }
  }

  #water-canvas {
    width: 100%;
    height: 100%;
    opacity: 0.1;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.getElementById('water-canvas') as HTMLCanvasElement;
    const ctx = canvas.getContext('2d')!;
    let width = canvas.width = window.innerWidth;
    let height = canvas.height = window.innerHeight;
    
    const ripples: any[] = [];
    const maxRipples = 5;
    const baseRadius = Math.min(width, height) * 0.1;
    let mouseX = 0;
    let mouseY = 0;
    let isMoving = false;
    
    interface CustomWindow extends Window {
      moveTimeout?: number;
    }
    
    const customWindow = window as CustomWindow;

    class Ripple {
      x: number;
      y: number;
      radius: number;
      maxRadius: number;
      opacity: number;
      color: string;

      constructor(x: number, y: number) {
        this.x = x;
        this.y = y;
        this.radius = 0;
        this.maxRadius = baseRadius * (0.8 + Math.random() * 0.4);
        this.opacity = 0.7;
        this.color = '#0A7B76';
      }

      update() {
        this.radius += 2;
        this.opacity -= 0.003;
        return this.opacity > 0;
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.strokeStyle = `rgba(10, 123, 118, ${this.opacity})`;
        ctx.lineWidth = 2;
        ctx.stroke();

        const gradient = ctx.createRadialGradient(
          this.x, this.y, 0,
          this.x, this.y, this.radius
        );
        gradient.addColorStop(0, `rgba(10, 123, 118, ${this.opacity * 0.2})`);
        gradient.addColorStop(1, 'rgba(10, 123, 118, 0)');
        ctx.fillStyle = gradient;
        ctx.fill();
      }
    }

    function createRipple(x: number, y: number) {
      if (ripples.length >= maxRipples) {
        ripples.shift();
      }
      ripples.push(new Ripple(x, y));
    }

    function animate() {
      ctx.clearRect(0, 0, width, height);

      if (Math.random() < 0.03) {
        createRipple(
          Math.random() * width,
          Math.random() * height
        );
      }

      if (isMoving && Math.random() < 0.1) {
        createRipple(mouseX, mouseY);
      }

      for (let i = ripples.length - 1; i >= 0; i--) {
        if (!ripples[i].update()) {
          ripples.splice(i, 1);
          continue;
        }
        ripples[i].draw();
      }

      requestAnimationFrame(animate);
    }

    window.addEventListener('resize', () => {
      width = canvas.width = window.innerWidth;
      height = canvas.height = window.innerHeight;
    });

    document.addEventListener('mousemove', (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
      isMoving = true;

      clearTimeout(customWindow.moveTimeout);
      customWindow.moveTimeout = setTimeout(() => {
        isMoving = false;
      }, 100) as unknown as number;
    });

    animate();
  });
</script>
