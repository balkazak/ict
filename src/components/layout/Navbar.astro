---
import logo from "@/assets/logo.png";
import { NavItems } from "@/lib/NavItems";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";

const { pathname } = Astro.url;

const isActive = (itemPath: string) => {
  return pathname === itemPath || pathname.startsWith(itemPath + "/");
};
---

<nav class="sticky top-0 z-50 bg-white shadow-sm">
  <div class="container mx-auto max-w-6xl px-4">
    <div class="flex items-center justify-between py-3">
      <a href="/" class="flex items-center gap-3 hover:opacity-80 transition-opacity">
        <div class="relative p-1 border border-[#0A7B76]/20 rounded bg-[#0A7B76]/5">
          <Image src={logo} alt="Logo" class="w-8 h-8" />
        </div>
        <span class="text-xl font-bold text-[#0A7B76] whitespace-nowrap">
          ICT Central Asia
        </span>
      </a>

      <div class="hidden lg:flex items-center space-x-6">
        {NavItems.map((item) => (
          <div class="relative group">
            {item.subItems ? (
              <div>
                <button class="flex items-center gap-1 px-3 py-2 text-[#0A7B76] hover:text-[#0A5B56] transition-colors whitespace-nowrap">
                  {item.title}
                  <Icon name="mdi:chevron-down" class="w-4 h-4" />
                </button>
                <div class="absolute top-full left-0 mt-1 w-72 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                  <div class="p-2">
                    {item.subItems.map((subItem) => (
                      <div>
                        {subItem.innerItems ? (
                          <div class="mb-3">
                            <div class="px-3 py-2 text-sm font-medium text-[#0A7B76] border-b border-gray-100 whitespace-nowrap">
                              {subItem.title}
                            </div>
                            <div class="mt-1">
                              {subItem.innerItems.map((innerItem) => (
                                <a
                                  href={innerItem.href}
                                  class={`block px-3 py-2 text-sm rounded hover:bg-[#0A7B76]/10 transition-colors whitespace-nowrap ${
                                    isActive(innerItem.href) ? "bg-[#0A7B76]/10 text-[#0A7B76] font-medium" : "text-gray-700"
                                  }`}
                                >
                                  {innerItem.title}
                                </a>
                              ))}
                            </div>
                          </div>
                        ) : (
                          <a
                            href={subItem.href}
                            class={`block px-3 py-2 text-sm rounded hover:bg-[#0A7B76]/10 transition-colors whitespace-nowrap ${
                              isActive(subItem.href) ? "bg-[#0A7B76]/10 text-[#0A7B76] font-medium" : "text-gray-700"
                            }`}
                          >
                            {subItem.title}
                          </a>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <a
                href={item.href}
                class={`px-3 py-2 rounded transition-colors whitespace-nowrap ${
                  isActive(item.href)
                    ? "bg-[#0A7B76]/10 text-[#0A7B76] font-medium"
                    : "text-[#0A7B76] hover:text-[#0A5B56]"
                }`}
              >
                {item.title}
              </a>
            )}
          </div>
        ))}
      </div>

      <button
        id="mobile-menu-toggle"
        class="lg:hidden flex items-center gap-2 px-3 py-2 text-[#0A7B76] border border-[#0A7B76]/20 rounded hover:bg-[#0A7B76]/10 transition-colors"
      >
        <span>Меню</span>
        <Icon name="mdi:menu" class="w-5 h-5" />
      </button>
    </div>

    <div id="mobile-menu" class="lg:hidden hidden border-t border-gray-200 py-4">
      <div class="space-y-1">
        {NavItems.map((item) => (
          <div>
            {item.subItems ? (
              <div>
                <div class="px-3 py-2 text-[#0A7B76] font-semibold border-b border-gray-100 mb-2">
                  {item.title}
                </div>
                <div class="ml-4 space-y-1">
                  {item.subItems.map((subItem) => (
                    <div>
                      {subItem.innerItems ? (
                        <div class="mb-3">
                          <div class="px-3 py-1 text-sm font-medium text-[#0A7B76]/80">
                            {subItem.title}
                          </div>
                          <div class="ml-4 space-y-1">
                            {subItem.innerItems.map((innerItem) => (
                              <a
                                href={innerItem.href}
                                class={`mobile-nav-link block px-3 py-2 text-sm rounded transition-colors ${
                                  isActive(innerItem.href)
                                    ? "bg-[#0A7B76]/10 text-[#0A7B76] font-medium"
                                    : "text-gray-700 hover:bg-gray-100"
                                }`}
                              >
                                {innerItem.title}
                              </a>
                            ))}
                          </div>
                        </div>
                      ) : (
                        <a
                          href={subItem.href}
                          class={`mobile-nav-link block px-3 py-2 text-sm rounded transition-colors ${
                            isActive(subItem.href)
                              ? "bg-[#0A7B76]/10 text-[#0A7B76] font-medium"
                              : "text-gray-700 hover:bg-gray-100"
                          }`}
                        >
                          {subItem.title}
                        </a>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <a
                href={item.href}
                class={`mobile-nav-link block px-3 py-3 rounded transition-colors border-b border-gray-100 ${
                  isActive(item.href)
                    ? "bg-[#0A7B76]/10 text-[#0A7B76] font-medium"
                    : "text-gray-700 hover:bg-gray-100"
                }`}
              >
                {item.title}
              </a>
            )}
          </div>
        ))}
      </div>
    </div>
  </div>
</nav>

<style>
  .mobile-nav-link {
    display: block !important;
    text-decoration: none !important;
    cursor: pointer !important;
    -webkit-tap-highlight-color: rgba(10, 123, 118, 0.2) !important;
    user-select: none;
    touch-action: manipulation;
    min-height: 44px;
    display: flex !important;
    align-items: center;
  }

  .mobile-nav-link:active {
    background-color: rgba(10, 123, 118, 0.2) !important;
    transform: scale(0.98);
  }

  .mobile-nav-link:focus {
    outline: 2px solid rgba(10, 123, 118, 0.5);
    outline-offset: 2px;
  }

  @media (hover: none) and (pointer: coarse) {
    .mobile-nav-link:hover {
      background-color: rgba(10, 123, 118, 0.1) !important;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');

    if (mobileMenuToggle && mobileMenu) {
      mobileMenuToggle.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }

    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    console.log('Mobile nav links found:', mobileNavLinks.length);

    mobileNavLinks.forEach((link, index) => {
      const href = link.getAttribute('href');
      console.log(`Mobile link ${index}:`, href, link.textContent?.trim());

      const handleNavigation = (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        console.log('Mobile navigation triggered for:', href);
        
        if (href && href !== '#' && href !== '') {
          if (mobileMenu) {
            mobileMenu.classList.add('hidden');
          }
          
          setTimeout(() => {
            window.location.href = href;
          }, 50);
        }
      };

      link.addEventListener('click', handleNavigation);
      link.addEventListener('touchend', handleNavigation);

      link.addEventListener('touchstart', (e) => {
        link.style.backgroundColor = 'rgba(10, 123, 118, 0.2)';
      });

      link.addEventListener('touchcancel', (e) => {
        link.style.backgroundColor = '';
      });
    });

    document.addEventListener('click', (e) => {
      if (mobileMenu && !mobileMenu.contains(e.target) && !mobileMenuToggle?.contains(e.target)) {
        mobileMenu.classList.add('hidden');
      }
    });
  });
</script>
