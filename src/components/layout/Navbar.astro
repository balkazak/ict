---
import logo from "@/assets/logo.png";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";

const { pathname } = Astro.url;

const isActive = (itemPath: string) => {
  return pathname === itemPath || pathname.startsWith(itemPath + "/");
};

const navItems = [
  {
    title: "Главная",
    href: "/",
  },
  {
    title: "О нас",
    href: "/about",
  },
  {
    title: "Мониторинг окружающей среды",
    href: "/monitoring",
    subItems: [
      { title: "Вода", href: "/monitoring/water/catalog" },
      { title: "Воздух", href: "/monitoring/air/catalog" },
      { title: "Земля", href: "/monitoring/soil/catalog" },
      { title: "Растения", href: "/monitoring/plants/catalog" },
    ],
  },
  {
    title: "Контакты",
    href: "/contact",
  },
];
---

<nav class="sticky top-0 z-50 bg-white shadow-sm">
  <div class="container mx-auto max-w-6xl px-4">
    <div class="flex items-center justify-between py-3">
      <a
        href="/"
        class="flex items-center gap-3 transition-opacity hover:opacity-80"
      >
        <div class="relative rounded border border-[#0A7B76]/20 bg-[#0A7B76]/5 p-1">
          <Image src={logo} alt="Logo" class="h-8 w-8" />
        </div>
        <span class="whitespace-nowrap text-xl font-bold text-[#0A7B76]">
          ICT Central Asia
        </span>
      </a>

      <div class="hidden items-center space-x-6 lg:flex">
        {navItems.map((item) => (
          <div class="relative group">
            {item.subItems ? (
              <div>
                <button class="flex items-center gap-1 px-3 py-2 text-[#0A7B76] hover:text-[#0A5B56] transition-colors whitespace-nowrap">
                  {item.title}
                  <Icon name="mdi:chevron-down" class="w-4 h-4" />
                </button>
                <div class="invisible absolute top-full left-0 z-50 mt-1 w-64 rounded-lg border border-gray-200 bg-white opacity-0 shadow-lg transition-all duration-200 group-hover:visible group-hover:opacity-100">
                  <div class="p-2">
                    {item.subItems.map((subItem) => (
                      <a
                        href={subItem.href}
                        class={`block rounded px-3 py-2 text-sm whitespace-nowrap transition-colors hover:bg-[#0A7B76]/10 ${
                          isActive(subItem.href)
                            ? "bg-[#0A7B76]/10 font-medium text-[#0A7B76]"
                            : "text-gray-700"
                        }`}
                      >
                        {subItem.title}
                      </a>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <a
                href={item.href}
                class={`rounded px-3 py-2 whitespace-nowrap transition-colors ${
                  isActive(item.href)
                    ? "bg-[#0A7B76]/10 font-medium text-[#0A7B76]"
                    : "text-[#0A7B76] hover:text-[#0A5B56]"
                }`}
              >
                {item.title}
              </a>
            )}
          </div>
        ))}
      </div>

      <button
        id="mobile-menu-toggle"
        class="flex items-center gap-2 rounded border border-[#0A7B76]/20 px-3 py-2 text-[#0A7B76] transition-colors hover:bg-[#0A7B76]/10 lg:hidden"
      >
        <span>Меню</span>
        <Icon name="mdi:menu" class="h-5 w-5" />
      </button>
    </div>

    <div
      id="mobile-menu"
      class="hidden border-t border-gray-200 py-4 lg:hidden"
    >
      <div class="space-y-1">
        {navItems.map((item) => (
          <div>
            {item.subItems ? (
              <div>
                <div class="mb-2 border-b border-gray-100 px-3 py-2 font-semibold text-[#0A7B76]">
                  {item.title}
                </div>
                <div class="ml-4 space-y-1">
                  {item.subItems.map((subItem) => (
                    <a
                      href={subItem.href}
                      class={`mobile-nav-link block rounded px-3 py-2 text-sm transition-colors ${
                        isActive(subItem.href)
                          ? "bg-[#0A7B76]/10 font-medium text-[#0A7B76]"
                          : "text-gray-700 hover:bg-gray-100"
                      }`}
                    >
                      {subItem.title}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a
                href={item.href}
                class={`mobile-nav-link block rounded border-b border-gray-100 px-3 py-3 transition-colors ${
                  isActive(item.href)
                    ? "bg-[#0A7B76]/10 font-medium text-[#0A7B76]"
                    : "text-gray-700 hover:bg-gray-100"
                }`}
              >
                {item.title}
              </a>
            )}
          </div>
        ))}
      </div>
    </div>
  </div>
</nav>

<style>
  .mobile-nav-link {
    display: block !important;
    text-decoration: none !important;
    cursor: pointer !important;
    -webkit-tap-highlight-color: rgba(10, 123, 118, 0.2) !important;
    user-select: none;
    touch-action: manipulation;
    min-height: 44px;
    display: flex !important;
    align-items: center;
  }

  .mobile-nav-link:active {
    background-color: rgba(10, 123, 118, 0.2) !important;
    transform: scale(0.98);
  }

  .mobile-nav-link:focus {
    outline: 2px solid rgba(10, 123, 118, 0.5);
    outline-offset: 2px;
  }

  @media (hover: none) and (pointer: coarse) {
    .mobile-nav-link:hover {
      background-color: rgba(10, 123, 118, 0.1) !important;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
    const mobileMenu = document.getElementById("mobile-menu");

    if (mobileMenuToggle && mobileMenu) {
      mobileMenuToggle.addEventListener("click", () => {
        mobileMenu.classList.toggle("hidden");
      });
    }

    const mobileNavLinks = document.querySelectorAll(".mobile-nav-link");

    mobileNavLinks.forEach((link) => {
      const href = link.getAttribute("href");

      const handleNavigation = (e: Event) => {
        e.preventDefault();
        e.stopPropagation();

        if (href && href !== "#" && href !== "") {
          if (mobileMenu) {
            mobileMenu.classList.add("hidden");
          }

          setTimeout(() => {
            window.location.href = href;
          }, 50);
        }
      };

      link.addEventListener("click", handleNavigation);
      link.addEventListener("touchend", handleNavigation);

      link.addEventListener("touchstart", (e) => {
        (link as HTMLElement).style.backgroundColor = "rgba(10, 123, 118, 0.2)";
      });

      link.addEventListener("touchcancel", (e) => {
        (link as HTMLElement).style.backgroundColor = "";
      });
    });

    document.addEventListener("click", (e) => {
      if (
        mobileMenu &&
        !mobileMenu.contains(e.target as Node) &&
        !mobileMenuToggle?.contains(e.target as Node)
      ) {
        mobileMenu.classList.add("hidden");
      }
    });
  });
</script>
